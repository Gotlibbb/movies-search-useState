{"version":3,"sources":["m1-ui/app/App.module.css","m2-dal/api.tsx","m1-ui/components/SearchComponent.tsx","m1-ui/images/151.gif","m1-ui/assets/Preloader.tsx","m1-ui/components/MovieComponent.tsx","m1-ui/components/FilmPreview.tsx","m1-ui/components/Pagination.tsx","m1-ui/components/SearchResults.tsx","m1-ui/app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","apikey","axiosInstance","axios","create","baseURL","API","name","page","get","then","res","data","id","SearchComponent","React","memo","props","history","useHistory","onClickSearchButton","searchingFilm","setCurrentPage","push","filmName","currentPage","className","style","searchingBlock","inputZone","type","autoFocus","placeholder","value","onChange","e","setFilmName","target","onKeyPress","key","onClick","Preloader","src","preloader","alt","width","paddingTop","MovieComponent","url","useParams","useEffect","filmNameUrl","viewMovie","movieId","moviePage","to","movieContainer","Poster","movieInfo","Title","Production","Type","Genre","imdbRating","Country","Year","Language","Director","Actors","Plot","BoxOffice","Runtime","FilmPreview","filmPreview","imdbID","Pagination","useState","inputPage","setInputPage","pageCount","Math","ceil","Number","totalResults","pages","i","pushUrl","String","errorInput","length","errorButton","toggleBlock","onlySwitch","justifyContent","paddingLeft","changePage","hidden","currentTarget","disabled","pageToggle","window","scrollTo","totalPage","pagesBlock","map","p","checked","SearchResults","searchResult","App","setSearchResult","setTotalResults","setPreloader","useCallback","filmPar","film","trim","Error","toLowerCase","ind","Search","el","title","setTitle","setYear","setRuntime","setGenre","setDirector","setActors","setPlot","setLanguage","setCountry","setPoster","setimdbRating","setimdbID","setType","setBoxOffice","setProduction","filmId","searchingContainer","logo","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.33c2252e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"App_logo__26551\",\"searchingContainer\":\"App_searchingContainer__34sVT\",\"searchResult\":\"App_searchResult__1VvsH\",\"searchingBlock\":\"App_searchingBlock__35kqj\",\"inputZone\":\"App_inputZone__O1aU2\",\"searchError\":\"App_searchError__1WBtE\",\"filmPreview\":\"App_filmPreview__1R6kf\",\"Title\":\"App_Title__2be9x\",\"movieContainer\":\"App_movieContainer__35hpZ\",\"movieInfo\":\"App_movieInfo__3KNJa\",\"moviePage\":\"App_moviePage__gUhHy\",\"pagesBlock\":\"App_pagesBlock__x5z86\",\"checked\":\"App_checked__LOm8_\",\"pageSwitch\":\"App_pageSwitch__1H6VZ\",\"toggleBlock\":\"App_toggleBlock__2uD1f\",\"pageToggle\":\"App_pageToggle__1Fuo4\",\"currentPage\":\"App_currentPage__fZj-p\",\"totalPage\":\"App_totalPage__3wWgF\",\"changePage\":\"App_changePage__3R8Fg\"};","import axios from  \"axios\";\r\n\r\nconst instance = {\r\n    baseURL: 'https://www.omdbapi.com/',\r\n\r\n};\r\nconst apikey = '&apikey=ff4140ae';\r\nconst axiosInstance = axios.create(instance);\r\n\r\n\r\nexport const API = {\r\n\r\n    searchFilmsByName: (name: string|undefined, page :string=\"1\" ) => axiosInstance.get(`?s=${name}&page=${page}${apikey}`).then(res=>res.data),\r\n\r\n    searchFilmsByImdbId: (id: string) => axiosInstance.get(`?i=${id}${apikey}`).then(res=>res),\r\n\r\n};\r\n\r\n","import React from \"react\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport style from \"../app/App.module.css\";\r\n\r\n\r\nexport const SearchComponent = React.memo((props: SearchComponentPropsType) => {\r\n    let history = useHistory()\r\n\r\n    const onClickSearchButton = () => {\r\n        props.searchingFilm()\r\n        props.setCurrentPage(1)\r\n        history.push(`/movies-search-useState/search-results/` + props.filmName + `/` + props.currentPage)\r\n    }\r\n\r\n\r\n    return <div className={style.searchingBlock}>\r\n        <div className={style.inputZone}>\r\n            <input type={\"text\"}\r\n                   autoFocus={true}\r\n                   placeholder={\"Enter name of movie \"}\r\n                   value={props.filmName}\r\n                   onChange={(e) => props.setFilmName(e.target.value)}\r\n                   onKeyPress={(e) => {e.key === \"Enter\" && onClickSearchButton()}}\r\n            />\r\n\r\n            <button onClick={onClickSearchButton}>Search\r\n            </button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\ntype SearchComponentPropsType = {\r\n\r\n    filmName: string\r\n    setFilmName: (filmName: string) => void\r\n    searchingFilm: () => void\r\n    setCurrentPage: (page: number) => void\r\n    currentPage: number\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/151.5b8af3aa.gif\";","import preloader from \"../images/151.gif\";\r\nimport React from \"react\";\r\n\r\nexport const Preloader = () => {\r\n\r\n    return <img src={preloader} alt=\"preloader\" style={{width: \"200px\", paddingTop: \"180px\"}}/>\r\n\r\n}","import style from \"../app/App.module.css\";\r\nimport React, {useEffect} from \"react\";\r\nimport {NavLink, useParams} from \"react-router-dom\";\r\nimport {Preloader} from \"../assets/Preloader\";\r\n\r\nexport const MovieComponent = React.memo((props: MoviePropsType) => {\r\n    let url: { movieId: string, filmNameUrl: string } = useParams()\r\n\r\n    useEffect(() => {\r\n        props.setFilmName(url.filmNameUrl)\r\n        props.viewMovie(url.movieId)\r\n\r\n    }, [])\r\n\r\n    if (props.preloader) return <Preloader/>\r\n\r\n    return <div className={style.moviePage}>\r\n        <NavLink to={\"/movies-search-useState/search-results/\" + url.filmNameUrl + `/` + props.currentPage}>⇦ Back to search</NavLink>\r\n        <div className={style.movieContainer}>\r\n            <img src={props.Poster} alt={\"poster\"}/>\r\n            <div className={style.movieInfo}>\r\n                <div className={style.Title}>{props.Title}</div>\r\n                <div><u><b>Production</b></u>: {props.Production}</div>\r\n                <div><u><b>Type</b></u>: {props.Type}</div>\r\n                <div><u><b>Genre</b></u>: {props.Genre}</div>\r\n                <div><u><b>imdbRating</b></u>: {props.imdbRating}</div>\r\n                <div><u><b>Country</b></u>: {props.Country}</div>\r\n                <div><u><b>Year</b></u>: {props.Year}</div>\r\n                <div><u><b>Language</b></u>: {props.Language}</div>\r\n                <div><u><b>Director</b></u>: {props.Director}</div>\r\n                <div><u><b>Actors</b></u>: {props.Actors}</div>\r\n                <div><u><b>Brief description</b></u>: {props.Plot}</div>\r\n                <div><u><b>Box office</b></u>: {props.BoxOffice}</div>\r\n                <div><u><b>Runtime</b></u>: {props.Runtime}</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n})\r\n\r\n\r\ntype MoviePropsType = {\r\n    preloader: boolean\r\n    Title: string\r\n    Year: string\r\n    Runtime: string\r\n    Genre: string\r\n    Director: string\r\n    Actors: string\r\n    Plot: string\r\n    Language: string\r\n    Country: string\r\n    Poster: string\r\n    imdbRating: string\r\n    imdbID: string\r\n    Type: string\r\n    BoxOffice: string\r\n    Production: string\r\n    viewMovie: (filmId: string) => void\r\n    setFilmName: (filmName: string) => void\r\n    currentPage: number\r\n}","import style from \"../app/App.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\nexport const FilmPreview = (props: MoviePreviewPropsType) => {\r\n\r\n    return <div className={style.filmPreview}>\r\n\r\n        <NavLink to={`/movies-search-useState/movie/` + props.filmName + `/` + props.imdbID}\r\n                 onClick={() => props.viewMovie(props.imdbID)}>\r\n            <div className={style.Title}>{props.Title}</div>\r\n            <img src={props.Poster} alt={\"poster\"}/>\r\n        </NavLink>\r\n        <div className={style.Year}>Year: {props.Year}</div>\r\n        <div className={style.Type}>Type: {props.Type}</div>\r\n    </div>\r\n}\r\n\r\nexport type MoviePreviewPropsType = {\r\n\r\n    filmName: string\r\n    Poster: string\r\n    Title: string\r\n    Type: string\r\n    Year: string\r\n    imdbID: string\r\n    viewMovie: (filmId: string) => void\r\n\r\n\r\n}","import React, {useState} from \"react\";\r\nimport style from \"../app/App.module.css\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\n\r\nexport const Pagination = React.memo((props: PaginationPropsType) => {\r\n\r\n    let [inputPage, setInputPage] = useState<string>()\r\n    let history = useHistory()\r\n    let pageSize = 10\r\n    let pageCount: number | undefined = Math.ceil(Number(props.totalResults) / pageSize);\r\n\r\n    let pages: number[] = [];\r\n\r\n    for (let i = 0; i <= pageCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    const pushUrl = (page: number) => {\r\n        history.push(`/movies-search-useState/search-results/` + props.filmName + `/` + String(page))\r\n    }\r\n\r\n\r\n    if (pageCount >= 10) {\r\n        let errorInput: boolean = Number(inputPage) >= pages.length || Number(inputPage) <= 0\r\n        let errorButton: boolean = props.currentPage + 1 >= pages.length || props.currentPage <= 0\r\n\r\n        return <div\r\n            className={style.toggleBlock}\r\n            style={props.onlySwitch ? {justifyContent: \"center\", paddingLeft: \"75px\"} : {}}\r\n        >\r\n            <div\r\n                className={style.changePage}\r\n                hidden={props.onlySwitch}\r\n            >\r\n                <div hidden={props.onlySwitch}>Change page:</div>\r\n                <input hidden={props.onlySwitch} type=\"number\" value={inputPage}\r\n                       onChange={(e) => {\r\n                           setInputPage(e.currentTarget.value)\r\n\r\n                       }}\r\n                       onKeyPress={(e) => {\r\n\r\n                           if (e.key === \"Enter\" && !errorInput) {\r\n                               props.setCurrentPage(Number(inputPage))\r\n                               props.searchingFilm(inputPage)\r\n                               pushUrl(Number(inputPage))\r\n\r\n                           }\r\n\r\n                       }}\r\n                />\r\n\r\n                <button hidden={props.onlySwitch}\r\n                        onClick={() => {\r\n                            props.setCurrentPage(Number(inputPage))\r\n                            props.searchingFilm(inputPage)\r\n                            pushUrl(Number(inputPage))\r\n                        }}\r\n                        disabled={errorInput}\r\n                >↪\r\n                </button>\r\n            </div>\r\n\r\n            <div\r\n                className={style.pageToggle}\r\n\r\n            >\r\n                {props.currentPage !== 1 &&\r\n                <button onClick={() => {\r\n                    props.onlySwitch && window.scrollTo(0, 300)\r\n                    props.setCurrentPage(pages[props.currentPage - 1])\r\n                    props.searchingFilm(String(props.currentPage - 1))\r\n                    pushUrl(props.currentPage - 1)\r\n\r\n\r\n                }}>⇐...prev </button>}\r\n                <div className={style.currentPage}> {props.currentPage} </div>\r\n                <button\r\n                    disabled={errorButton}\r\n                    onClick={() => {\r\n                        props.onlySwitch && window.scrollTo(0, 300)\r\n                        props.setCurrentPage(pages[props.currentPage + 1])\r\n                        props.searchingFilm(String(props.currentPage + 1))\r\n                        pushUrl(props.currentPage + 1)\r\n\r\n\r\n                    }}> next...⇒\r\n                </button>\r\n            </div>\r\n\r\n            <div\r\n                className={style.totalPage}\r\n                hidden={props.onlySwitch}\r\n            >Total pages: {pages.length - 1}</div>\r\n        </div>\r\n\r\n\r\n    }\r\n\r\n\r\n    return <div className={style.pagesBlock}>\r\n        {pages.map(p => {\r\n            return <span hidden={p === 0}\r\n                         key={p}\r\n                         className={props.currentPage === p ? style.checked : \" \"}\r\n                         onClick={\r\n                             () => {\r\n                                 props.setCurrentPage(p)\r\n                                 props.searchingFilm(String(p))\r\n                                 pushUrl(p)\r\n                             }\r\n                         }>\r\n                {p}\r\n            </span>\r\n        })}\r\n    </div>\r\n\r\n})\r\n\r\ntype PaginationPropsType = {\r\n    searchingFilm: (page?: string) => void\r\n    totalResults: string | undefined\r\n    setCurrentPage: (currentPage: number) => void\r\n    currentPage: number\r\n    onlySwitch?: boolean\r\n    filmName: string\r\n\r\n\r\n}\r\n","import React, {useEffect} from \"react\";\r\nimport style from \"../app/App.module.css\";\r\nimport {Pagination} from \"./Pagination\";\r\nimport {Preloader} from \"../assets/Preloader\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\n\r\nexport const SearchResults = React.memo((props: SearchResultsPropsType) => {\r\n\r\n    let url: { filmNameUrl: string, page: string } = useParams()\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        props.setCurrentPage(Number(url.page))\r\n        props.setFilmName(url.filmNameUrl)\r\n        props.searchingFilm(url.page, url.filmNameUrl)\r\n    }, [])\r\n\r\n\r\n    return <div className={style.searchingBlock}>\r\n\r\n\r\n        <div className={style.searchResult}>\r\n\r\n\r\n            <Pagination searchingFilm={props.searchingFilm}\r\n                        totalResults={props.totalResults}\r\n                        currentPage={props.currentPage}\r\n                        setCurrentPage={props.setCurrentPage}\r\n                        filmName={props.filmName}\r\n\r\n\r\n            />\r\n\r\n            {props.preloader ? <Preloader/> :\r\n                <div className={style.searchResult}>\r\n                    {props.searchResult}\r\n                </div>\r\n            }\r\n            <Pagination searchingFilm={props.searchingFilm}\r\n                        totalResults={props.totalResults}\r\n                        onlySwitch={true}\r\n                        currentPage={props.currentPage}\r\n                        setCurrentPage={props.setCurrentPage}\r\n                        filmName={props.filmName}\r\n            />\r\n\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\ntype SearchResultsPropsType = {\r\n    preloader: boolean\r\n    setCurrentPage: (page: number) => void\r\n    currentPage: number\r\n    searchResult: JSX.Element[] | string | undefined\r\n    totalResults: string | undefined\r\n    searchingFilm: (page?: string, filmPar?: string) => void\r\n    setFilmName: (filmName: string) => void\r\n    filmName: string\r\n\r\n\r\n}\r\n\r\n","import React, {useCallback, useState} from 'react';\r\nimport style from './App.module.css';\r\nimport {API} from \"../../m2-dal/api\";\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport {SearchComponent} from \"../components/SearchComponent\";\r\nimport {MovieComponent} from \"../components/MovieComponent\";\r\nimport {FilmPreview, MoviePreviewPropsType} from \"../components/FilmPreview\";\r\nimport {SearchResults} from \"../components/SearchResults\";\r\n\r\n\r\nexport const App = React.memo(() => {\r\n\r\n\r\n    let [filmName, setFilmName] = useState<string>(\"\")\r\n    let [searchResult, setSearchResult] = useState<JSX.Element[] | string>()\r\n    let [totalResults, setTotalResults] = useState<string | undefined>(\"\")\r\n    let [currentPage, setCurrentPage] = useState<number>(1)\r\n    let [preloader, setPreloader] = useState(false);\r\n\r\n\r\n    const searchingFilm = useCallback((page?: string, filmPar?: string) => {\r\n        setPreloader(true)\r\n        let film = filmPar ? filmPar : filmName\r\n\r\n        API.searchFilmsByName(film.trim(), page).then(\r\n            (res: ResponseType) => {\r\n\r\n                setTotalResults(res.totalResults)\r\n\r\n                if (res.Error) {\r\n                    setPreloader(false)\r\n                    setSearchResult(`\"` + film.trim() + `\" - ` + res.Error.toLowerCase())\r\n\r\n                }\r\n                if (!res.Error) {\r\n                    setPreloader(false)\r\n\r\n                    let ind = 0;\r\n                    setSearchResult(\r\n                        res.Search.map(\r\n                            (el) => {\r\n                                return <FilmPreview key={ind += 1}\r\n                                                    filmName={filmName}\r\n                                                    viewMovie={viewMovie}\r\n                                                    imdbID={el.imdbID}\r\n                                                    Poster={el.Poster}\r\n                                                    Title={el.Title} Type={el.Type} Year={el.Year}/>\r\n\r\n                            })\r\n                    )\r\n\r\n                }\r\n            }\r\n        )\r\n\r\n\r\n    }, [filmName, setTotalResults, setSearchResult])\r\n\r\n\r\n    type ResponseType = {\r\n        Error?: string\r\n        Response: string\r\n        Search: MoviePreviewPropsType[]\r\n        totalResults: string\r\n    }\r\n    //-----------------------------------------------------\r\n    let [title, setTitle] = useState(\"\")\r\n    let [Year, setYear] = useState(\"\")\r\n    let [Runtime, setRuntime] = useState(\"\")\r\n    let [Genre, setGenre] = useState(\"\")\r\n    let [Director, setDirector] = useState(\"\")\r\n    let [Actors, setActors] = useState(\"\")\r\n    let [Plot, setPlot] = useState(\"\")\r\n    let [Language, setLanguage] = useState(\"\")\r\n    let [Country, setCountry] = useState(\"\")\r\n    let [Poster, setPoster] = useState(\"\")\r\n    let [imdbRating, setimdbRating] = useState(\"\")\r\n    let [imdbID, setimdbID] = useState(\"\")\r\n    let [Type, setType] = useState(\"\")\r\n    let [BoxOffice, setBoxOffice] = useState(\"\")\r\n\r\n\r\n    let [Production, setProduction] = useState(\"\")\r\n    const viewMovie = useCallback((filmId: string) => {\r\n        setPreloader(true)\r\n\r\n        API.searchFilmsByImdbId(filmId).then(\r\n            (res) => {\r\n\r\n                setPreloader(false)\r\n\r\n                setTitle(res.data.Title)\r\n                setYear(res.data.Year)\r\n                setRuntime(res.data.Runtime)\r\n                setGenre(res.data.Genre)\r\n                setDirector(res.data.Director)\r\n                setActors(res.data.Actors)\r\n                setPlot(res.data.Plot)\r\n                setLanguage(res.data.Language)\r\n                setCountry(res.data.Country)\r\n                setPoster(res.data.Poster)\r\n                setimdbRating(res.data.imdbRating)\r\n                setimdbID(res.data.imdbID)\r\n                setType(res.data.Type)\r\n                setBoxOffice(res.data.BoxOffice)\r\n                setProduction(res.data.Production)\r\n            }\r\n        )\r\n//-----------------------------------------------------------------------\r\n\r\n    }, [])\r\n\r\n    return <div className={style.searchingContainer}>\r\n        <div className={style.logo}><h1>Movies_Search</h1></div>\r\n        <SearchComponent\r\n            currentPage={currentPage}\r\n            filmName={filmName}\r\n            searchingFilm={searchingFilm}\r\n            setFilmName={setFilmName}\r\n            setCurrentPage={setCurrentPage}\r\n        />\r\n\r\n        <Switch>\r\n\r\n\r\n\r\n            <Route path={'/movies-search-useState/search-results/:filmNameUrl/:page'}>\r\n\r\n                <SearchResults\r\n                    setFilmName={setFilmName}\r\n                    searchingFilm={searchingFilm}\r\n                    currentPage={currentPage}\r\n                    setCurrentPage={setCurrentPage}\r\n                    searchResult={searchResult}\r\n                    totalResults={totalResults}\r\n                    preloader={preloader}\r\n                    filmName={filmName}\r\n\r\n                />\r\n\r\n            </Route>\r\n            <Route path={'/movies-search-useState/movie/:filmNameUrl/:movieId'}>\r\n                <MovieComponent\r\n                    setFilmName={setFilmName}\r\n                    preloader={preloader}\r\n                    Title={title}\r\n                    imdbID={imdbID}\r\n                    Year={Year}\r\n                    Type={Type}\r\n                    Poster={Poster}\r\n                    Actors={Actors}\r\n                    BoxOffice={BoxOffice}\r\n                    Director={Director}\r\n                    Country={Country}\r\n                    Genre={Genre}\r\n                    imdbRating={imdbRating}\r\n                    Language={Language}\r\n                    Plot={Plot}\r\n                    Production={Production}\r\n                    Runtime={Runtime}\r\n                    viewMovie={viewMovie}\r\n                    currentPage={currentPage}\r\n                />\r\n\r\n            </Route>\r\n        </Switch>\r\n\r\n    </div>\r\n\r\n})\r\n\r\n\r\n\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './m1-ui/app/App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n\n        <BrowserRouter>\n            <>\n            <App/>\n                </>\n        </BrowserRouter>\n    ,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}